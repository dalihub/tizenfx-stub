CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
CMAKE_POLICY(SET CMP0053 NEW) # Simplify variable reference and escape sequence evaluation

SET(MAJORVER 0)
SET(FULLVER 1)

SET(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS true)
SET(PREFIX ${CMAKE_INSTALL_PREFIX})
SET(EXEC_PREFIX "\${prefix}")
SET(VERSION ${FULLVER})

SET(LIB_INSTALL_DIR ${PREFIX}/lib)

PROJECT(app_common C)

#AUX_SOURCE_DIRECTORY(src SOURCES)
SET(CAPI_APPFW_APP_COMMON_SOURCES src/app-common.c src/asprintf.c)
SET(CAPI_APPFW_APP_MANAGER_SOURCES src/app-manager.c src/asprintf.c)
SET(CAPI_SYSTEM_INFO_SOURCES src/system_info.c)
SET(DLOG_SOURCES src/dlog.c src/asprintf.c)

ADD_DEFINITIONS("-DSHARE_PREFIX=\"${SHARE_INSTALL_PREFIX}/aul\"")

# Set required packages
INCLUDE(FindPkgConfig)
#SET(APPCOMMON_LIB_PKG_CHECK_MODULES )
#pkg_check_modules(libpkgs REQUIRED ${APPCOMMON_LIB_PKG_CHECK_MODULES})

#FOREACH(flag ${libpkgs_CFLAGS})
#	SET(EXTRA_CFLAGS "${EXTRA_CFLAGS} ${flag}")
#ENDFOREACH(flag)

#pkg_check_modules(APP_LAUNCHER_DEPS glib-2.0 pkgmgr-info bundle)
#FOREACH(APP_LAUNCHER_FLAGS ${APP_LAUNCHER_DEPS_CFLAGS})
#	SET(EXTRA_CFLAGS "${EXTRA_CFLAGS} ${APP_LAUNCHER_FLAGS}")
#ENDFOREACH(APP_LAUNCHER_FLAGS)

# Compiler flags
INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/include)
INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/src)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR}/src)

IF (UNIX)
  SET(EXTRA_CFLAGS "${EXTRA_CFLAGS} -Wl,-zdefs" )
  #SET(EXTRA_CFLAGS "${EXTRA_CFLAGS} -fvisibility=hidden")
  SET(EXTRA_CFLAGS "${EXTRA_CFLAGS} -fpic -fPIC")
  SET(EXTRA_CFLAGS "${EXTRA_CFLAGS} -Werror")
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${EXTRA_CFLAGS}")
  SET(CMAKE_C_FLAGS_DEBUG "-O0 -g")
  SET(CMAKE_C_FLAGS_RELEASE "-O2")
  SET(CMAKE_SKIP_BUILD_RPATH true)
  # Linker flags
  SET(CMAKE_EXE_LINKER_FLAGS "-Wl,--as-needed -fPIC")
ENDIF()

IF (WIN32)
  ADD_DEFINITIONS(-DWIN32_LEAN_AND_MEAN)
ENDIF()

ADD_DEFINITIONS(-DBUILDING_TIZENFX_STUB)

INCLUDE(CheckSymbolExists)
INCLUDE(CheckIncludeFile)
INCLUDE(CheckTypeSize)

SET(CMAKE_REQUIRED_DEFINITIONS -D_GNU_SOURCE)
CHECK_SYMBOL_EXISTS(asprintf stdio.h HAVE_ASPRINTF)
CHECK_SYMBOL_EXISTS(vasprintf stdio.h HAVE_VASPRINTF)
CHECK_INCLUDE_FILE(unistd.h HAVE_UNISTD_H)
CHECK_INCLUDE_FILE(sys/types.h HAVE_SYS_TYPES_H)
CHECK_INCLUDE_FILE(windows.h HAVE_WINDOWS_H)
CHECK_INCLUDE_FILE(combaseapi.h HAVE_COMBASEAPI_H)
SET(CMAKE_REQUIRED_INCLUDES unistd.h sys/types.h)
CHECK_TYPE_SIZE(uid_t UID_T)
CHECK_TYPE_SIZE(gid_t GID_T)
CHECK_TYPE_SIZE(pid_t PID_T)
CONFIGURE_FILE(src/config.h.in src/config.h)

# APP_COMMON
add_library(capi-appfw-app-common SHARED ${CAPI_APPFW_APP_COMMON_SOURCES})
TARGET_LINK_LIBRARIES(capi-appfw-app-common ${libpkgs_LDFLAGS})
SET_TARGET_PROPERTIES(capi-appfw-app-common PROPERTIES SOVERSION ${MAJORVER})
SET_TARGET_PROPERTIES(capi-appfw-app-common PROPERTIES VERSION ${FULLVER})

# APP_MANAGER
add_library(capi-appfw-app-manager SHARED ${CAPI_APPFW_APP_MANAGER_SOURCES})
TARGET_LINK_LIBRARIES(capi-appfw-app-manager ${libpkgs_LDFLAGS})
SET_TARGET_PROPERTIES(capi-appfw-app-manager PROPERTIES SOVERSION ${MAJORVER})
SET_TARGET_PROPERTIES(capi-appfw-app-manager PROPERTIES VERSION ${FULLVER})

# SYSTEM INFO
add_library(capi-system-info SHARED ${CAPI_SYSTEM_INFO_SOURCES})
TARGET_LINK_LIBRARIES(capi-system-info ${libpkgs_LDFLAGS})
SET_TARGET_PROPERTIES(capi-system-info PROPERTIES SOVERSION ${MAJORVER})
SET_TARGET_PROPERTIES(capi-system-info PROPERTIES VERSION ${FULLVER})

# DLOG
add_library(dlog SHARED ${DLOG_SOURCES})
TARGET_LINK_LIBRARIES(dlog ${libpkgs_LDFLAGS})
SET_TARGET_PROPERTIES(dlog PROPERTIES SOVERSION ${MAJORVER})
SET_TARGET_PROPERTIES(dlog PROPERTIES VERSION ${FULLVER})


# pkgconfig file
#CONFIGURE_FILE(aul.pc.in aul.pc @ONLY)
#CONFIGURE_FILE(feature/preexec_list.txt.in feature/preexec_list.txt @ONLY)

# Install headers, other files
INSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/include/app_common.h DESTINATION ${CMAKE_INSTALL_PREFIX}/include/app-common)
#INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/aul.pc DESTINATION ${LIB_INSTALL_DIR}/pkgconfig)
#INSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/feature/preexec_list.txt DESTINATION ${SHARE_INSTALL_PREFIX}/aul )
#INSTALL(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/data/miregex DESTINATION ${SHARE_INSTALL_PREFIX}/aul )

# tool
#ADD_SUBDIRECTORY(tool)
#ADD_SUBDIRECTORY(parser)

IF (WIN32)
  SET(BIN_DIR ${CMAKE_INSTALL_PREFIX}/bin)
  SET(LIB_DIR ${LIB_INSTALL_DIR})

  IF (${CMAKE_BUILD_TYPE} MATCHES Debug)
    SET(BIN_DIR ${BIN_DIR}/Debug)
    SET(LIB_DIR ${LIB_DIR}/Debug)
  ENDIF()

  # install binaries
  INSTALL(TARGETS capi-appfw-app-common
    LIBRARY DESTINATION ${LIB_DIR}
    ARCHIVE DESTINATION ${LIB_DIR}
    RUNTIME DESTINATION ${BIN_DIR}
  )
  INSTALL(TARGETS capi-appfw-app-manager
    LIBRARY DESTINATION ${LIB_DIR}
    ARCHIVE DESTINATION ${LIB_DIR}
    RUNTIME DESTINATION ${BIN_DIR}
  )
  INSTALL(TARGETS capi-system-info
    LIBRARY DESTINATION ${LIB_DIR}
    ARCHIVE DESTINATION ${LIB_DIR}
    RUNTIME DESTINATION ${BIN_DIR}
  )
  INSTALL(TARGETS dlog
    LIBRARY DESTINATION ${LIB_DIR}
    ARCHIVE DESTINATION ${LIB_DIR}
    RUNTIME DESTINATION ${BIN_DIR}
  )

  IF (${CMAKE_BUILD_TYPE} MATCHES Debug)
    install( FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/capi-appfw-app-common.pdb DESTINATION ${BIN_DIR} )
    install( FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/capi-appfw-app-manager.pdb DESTINATION ${BIN_DIR} )
    install( FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/capi-system-info.pdb DESTINATION ${BIN_DIR} )
    install( FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/dlog.pdb DESTINATION ${BIN_DIR} )
  ENDIF()
ELSE()
  INSTALL(TARGETS capi-appfw-app-common DESTINATION ${LIB_INSTALL_DIR} COMPONENT RuntimeLibraries)
  INSTALL(TARGETS capi-appfw-app-manager DESTINATION ${LIB_INSTALL_DIR} COMPONENT RuntimeLibraries)
  INSTALL(TARGETS capi-system-info DESTINATION ${LIB_INSTALL_DIR} COMPONENT RuntimeLibraries)
  INSTALL(TARGETS dlog DESTINATION ${LIB_INSTALL_DIR} COMPONENT RuntimeLibraries)
ENDIF()
